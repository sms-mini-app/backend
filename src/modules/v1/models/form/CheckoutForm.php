<?php

namespace app\modules\v1\models\form;

use app\models\Order;
use yii\base\Model;

class CheckoutForm extends Model
{
    public $name;
    public $title;
    public $text;
    public $provider_note;
    public $price;
    public $tenant_id;

    public function rules()
    {
        return array_merge(parent::rules(), [
            [["name", "title", "text"], "required"],
            [["name", "title", "text"], "filter", "filter" => function ($value) {
                return strtolower($value);
            }],
            ["name", "validateName"],
            ["price", "filter", "filter" => function () {
                return $this->getPrice();
            }],
            ["tenant_id", "filter", "filter" => function () {
                return $this->getTenantId();
            }]
        ]); // TODO: Change the autogenerated stub
    }

    public function formName()
    {
        return "";
    }

    public function afterValidate()
    {
        $this->setProviderNote();
        parent::afterValidate(); // TODO: Change the autogenerated stub
    }

    public function setProviderNote()
    {
        $this->provider_note = $this->text;
    }

    public function getPrice(): ?float
    {
        preg_match("/([0-9]+đ)/", $this->text, $match);

        if (empty($match)) {
            $this->addError("price", "Price invalid");
            return null;
        }
        return floatval(str_replace("đ", "", $match[0]));
    }

    public function getTenantId(): ?string
    {
        $arrParse = explode(":", $this->text);
        if (empty($arrParse[2])) {
            $this->addError("tenant_id", "invalid tenant_id");
            return null;
        }

        $transferContent = trim($arrParse[2]);
        preg_match("/^([0-9]+)/", $transferContent, $match);
        if (empty($match[0])) {
            $this->addError("tenant_id", "tenant not found");
            return null;
        }
        return $match[0];
    }

    public function validateName($attribute)
    {
        if ($this->name !== Order::TYPE_MOMO) {
            $this->addError($attribute, "Name invalid");
        }
    }
}